name: Golang 构建发布

on:
  workflow_dispatch:

jobs:
  build-sequential:
    name: 构建并发布固件
    runs-on: ubuntu-22.04
    env:
      REPO_BRANCH: master
      TZ: Asia/Shanghai

    steps:
      - name: 检出仓库
        uses: actions/checkout@v3

      - name: 安装 Golang 和工具
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y jq curl upx-ucl

          ARCH="linux-amd64"
          GOLANG_LATEST=$(curl -s https://go.dev/dl/?mode=json | grep -o "go[0-9.]*.${ARCH}.tar.gz" | head -n 1 | tr -d '\r\n')
          DOWNLOAD_URL="https://go.dev/dl/${GOLANG_LATEST}"

          echo "最新版 Go: $GOLANG_LATEST"
          echo "下载地址: $DOWNLOAD_URL"

          curl -LO "$DOWNLOAD_URL"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "$GOLANG_LATEST"
          rm -f "$GOLANG_LATEST"

          # 设置 Go 环境变量
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          echo "GO111MODULE=on" >> $GITHUB_ENV

          # 设置 release tag
          ts=$(date +'%Y%m%d%H%M%S')
          echo "release_tag=OpenWRT_Build_$ts" >> $GITHUB_ENV

      - name: 构建多架构二进制
        run: |
          export PATH=$PATH:/usr/local/go/bin
          export CGO_ENABLED=0

          TIME_TAG=$(date +"%Y%m%d%H%M")
          OUT_DIR="./soft"
          mkdir -p "$OUT_DIR"
          rm -rf "$OUT_DIR"/*

          build_target() {
              local os=$1
              local arch=$2
              local output=$3
              local ldflags=$4
              local extra_env=$5

              (
                  echo "编译: $output"
                  export GOOS=$os
                  export GOARCH=$arch
                  eval "$extra_env"
                  if go build -o "$output" -ldflags="$ldflags" .; then
                      echo "✅ 成功: $output"
                  else
                      echo "❌ 失败: $output"
                  fi
              ) &
          }

          build_target windows amd64 "${OUT_DIR}/control_windows_amd64_${TIME_TAG}.exe" "-s -w -H windowsgui" ""
          build_target linux amd64 "${OUT_DIR}/control_linux_amd64_${TIME_TAG}" "-s -w" ""
          build_target linux arm64 "${OUT_DIR}/control_linux_arm64_${TIME_TAG}" "-s -w" ""
          build_target linux mipsle "${OUT_DIR}/control_linux_mips32_${TIME_TAG}" "-s -w" "export GOMIPS=softfloat"

          wait
          echo "✅ 所有编译完成:"
          ls -lh "$OUT_DIR"

      - name: 压缩二进制文件（UPX）
        run: |
          OUT_DIR="./soft"
          TIME_TAG=$(date +"%Y%m%d%H%M")

          compress_if_exists() {
              local file=$1
              if [[ -f "$file" ]]; then
                  echo "压缩: $file"
                  upx --best "$file" &
              else
                  echo "⚠️ 文件不存在: $file"
              fi
          }

          compress_if_exists "${OUT_DIR}/control_linux_amd64_${TIME_TAG}"
          compress_if_exists "${OUT_DIR}/control_linux_arm64_${TIME_TAG}"
          compress_if_exists "${OUT_DIR}/control_linux_mips32_${TIME_TAG}"
          # 可选：Windows 平台压缩
          # compress_if_exists "${OUT_DIR}/control_windows_amd64_${TIME_TAG}.exe"

          wait
          echo "✅ 压缩完成:"
          ls -lh "$OUT_DIR"

      - name: 上传所有固件到 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.release_tag }}
          name: ${{ env.release_tag }}
          body: 自动构建上传的 OpenWrt Golang 控制器
          files: soft/*
