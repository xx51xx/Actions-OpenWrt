# ===================================================================
# GitHub Actions Workflow：OpenWrt 矩阵化构建并发布 .img.gz 固件
#
# 修正版要点：
# 1. 用 echo "key=value" >> $GITHUB_OUTPUT 取代 set-output
# 2. 用 jq -c 生成单行 JSON，避免换行导致解析失败
# 3. 直接把 matrix 当数组，build 里直接 fromJson
# ===================================================================

name: OpenWrt 矩阵化构建

on:
  workflow_dispatch:

jobs:
  # -----------------------------------------------------------------
  # 模块：prepare_matrix
  # 目标：扫描 config/ 下所有一级子目录，生成矩阵数组
  # 输出：matrix="[{"config":"x86_64-.."}, {"config":"arm_.."}, ...]"
  # -----------------------------------------------------------------
  prepare_matrix:
    name: 准备配置矩阵
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: 检出仓库
        uses: actions/checkout@v3

      - name: 安装 jq（JSON 处理工具）
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq -y jq

      - name: 生成配置矩阵
        id: set-matrix
        run: |
          # 1. 找出 config/ 下所有一级子目录名
          configs=$(find config -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | jq -R . | jq -cs .)

          # 2. 把目录名数组变成 [{"config":"xxx"}, ...] 这样的矩阵数组
          matrix=$(jq -n --argjson arr "$configs" '
            $arr | map({ config: . })
          ')

          # 3. 用 jq -c 压缩成单行，再写入输出变量
          matrix_compact=$(echo "$matrix" | jq -c .)
          echo "matrix=$matrix_compact" >> $GITHUB_OUTPUT

  # -----------------------------------------------------------------
  # 模块：build
  # 目标：针对每个 config 子目录做一遍构建并发布 .img.gz
  # -----------------------------------------------------------------
  build:
    name: 构建 ${{ matrix.config }}
    needs: prepare_matrix
    runs-on: ubuntu-22.04

    # 直接把上一步输出的单行 JSON 当作数组传给 strategy.matrix
    strategy:
      matrix: ${{ fromJson(needs.prepare_matrix.outputs.matrix) }}

    env:
      REPO_URL:    https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      TZ:          Asia/Shanghai
      CONFIG_DIR:  ${{ matrix.config }}

    steps:
      - name: 检出仓库
        uses: actions/checkout@v3

      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo df -hT
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          # sudo mkdir -p /workdir
          # sudo chown $USER:$GROUPS /workdir
          sudo df -hT

      - name: 创建 Loopback LVM 并挂载到 /workdir
        run: |
          sudo df -hT
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /workdir
          sudo mount /dev/github/runner /workdir
          sudo chown $USER:$GROUPS /workdir
          df -Th

      - name: 克隆 OpenWrt 源码
        working-directory: /workdir
        run: |
          git clone --depth 1 --branch "$REPO_BRANCH" "$REPO_URL" openwrt
          ln -s /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: 复制 .config 和自定义包
        run: |
          cp config/${CONFIG_DIR}/.config openwrt/.config
          pkg=$(find config/${CONFIG_DIR} -mindepth 1 -maxdepth 1 -type d | head -n1)
          cp -R "$pkg" openwrt/package/

      - name: 自定义步骤 1 (diy-part1.sh)
        run: |
          chmod +x ./diy-part1.sh
          cd openwrt && $GITHUB_WORKSPACE/diy-part1.sh

      - name: 更新并安装 Feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 下载源码依赖并清理空包
        run: |
          cd openwrt
          make defconfig
          make download -j$(nproc) || true
          find dl -size -1024c -delete

      - name: 自定义步骤 2 (diy-part2.sh)
        run: |
          chmod +x ./diy-part2.sh
          cd openwrt && $GITHUB_WORKSPACE/diy-part2.sh

      - name: 编译固件
        id: compile
        run: |
          cd openwrt
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 定位 .img.gz 固件
        run: |
          cd openwrt/bin/targets/*/*
          img=$(ls *.img.gz | head -n1)
          echo "IMAGE_PATH=$(pwd)/$img" >> $GITHUB_ENV

      - name: 生成 Release Tag
        id: tag
        run: |
          ts=$(date +'%Y%m%d%H%M')
          echo "release_tag=${CONFIG_DIR}_$ts" >> $GITHUB_OUTPUT

      - name: 发布到 GitHub Release（仅上传 .img.gz）
        uses: softprops/action-gh-release@v1
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name:     ${{ steps.tag.outputs.release_tag }}
          files:    ${{ env.IMAGE_PATH }}
