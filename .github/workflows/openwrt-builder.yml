name: OpenWrt 顺序构建发布

on:
  workflow_dispatch:

jobs:
  build-sequential:
    name: 顺序构建并发布固件
    runs-on: ubuntu-22.04
    env:
      REPO_URL:        https://github.com/coolsnowwolf/lede
      REPO_BRANCH:     master
      TZ:              Asia/Shanghai
      CUSTOM_PKG_DIR:  hello-openwrt
      CONFIG_FILE:     .config
      BUILD_DIR:       /  # OpenWrt源码工作目录
      WORKSPACE:       ${{ github.workspace }}
      LOG_SILENT:      false  # true=静默模式，false=打印所有日志

    steps:
      - name: 检出当前 GitHub 仓库
        uses: actions/checkout@v3

      - name: 安装依赖及清理空间
        run: |
          echo "正在运行 安装依赖及清理空间" > /dev/null 2>&1
          log() {
            echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $*"
          }

          if [ "$LOG_SILENT" = "true" ]; then
            REDIRECT=">/dev/null 2>&1"
          else
            REDIRECT=""
          fi

          log "开始安装依赖与清理"
          
          if [ ! -d "$BUILD_DIR" ]; then
              sudo mkdir -p "$BUILD_DIR"
          fi

          eval "sudo df -hT $REDIRECT"
          eval "sudo apt-get update -qq $REDIRECT"
          eval "sudo apt-get install -qq -y jq $REDIRECT"

          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          eval "sudo docker image prune --all --force $REDIRECT"

          eval "sudo -E apt-get -qq update $REDIRECT"
          eval "sudo -E apt-get install -qq -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
          genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
          libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
          libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
          python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
          swig texinfo uglifyjs upx-ucl unzip vim wget $REDIRECT"

          eval "sudo -E apt-get -qq autoremove --purge $REDIRECT"
          eval "sudo -E apt-get -qq clean $REDIRECT"

          sudo timedatectl set-timezone "$TZ"
          sudo hostname OpenWrt
          sudo hostnamectl set-hostname OpenWrt

          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

          ts=$(date +'%Y%m%d%H%M%S')
          release_tag="OpenWRT_Build_$ts"
          log "release_tag=$release_tag"
          echo "release_tag=$release_tag" >> $GITHUB_ENV

          mkdir -p img

          log "依赖安装与清理完成"
          eval "sudo df -hT $REDIRECT"

      - name: 获取 config 目录列表
        id: get-configs
        run: |
          echo "正在获取 config 目录列表" > /dev/null 2>&1
          log() {
            echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $*"
          }
          log "获取 config 目录列表"
          configs=$(find config -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort | jq -R '@json' | jq -cs .)
          echo "configs=$configs" >> $GITHUB_OUTPUT
          log "获取 config 目录列表完成"

      - name: 克隆 OpenWrt 源代码到目录
        run: |
          echo "正在运行 克隆 OpenWrt 源代码到目录" > /dev/null 2>&1

          log() { echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $1"; }

          log "开始克隆 OpenWrt 源码"
          
          gitpkg="/openwrt_pkg"
          sudo mkdir -p "$gitpkg"
          sudo rm -rf "$gitpkg"/*
          sudo chmod 0755 "$gitpkg"
          
          sudo git clone --branch "$REPO_BRANCH" "$REPO_URL" "$gitpkg" >> $GITHUB_OUTPUT
          sudo chmod -R 0755 "$gitpkg"

          # log "移动源码文件到目录"
          shopt -s dotglob
          sudo mv -f "$gitpkg"/* "$BUILD_DIR"/
          shopt -u dotglob
          
          sudo rm -rf "$gitpkg"
          log "源码克隆完成"

      - name: 构建每个 config 配置的固件
        run: |
          echo "正在运行 构建每个 config 配置的固件" > /dev/null 2>&1
          log() {
            echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $*"
          }

          if [ "$LOG_SILENT" = "true" ]; then
            REDIRECT=">/dev/null 2>&1"
          else
            REDIRECT=""
          fi

          configs=${{ steps.get-configs.outputs.configs }}
          log "发现配置列表: $configs"
          config_array=$(echo "$configs" | jq -r '.[]')

          for config_name in $config_array; do
            log "开始构建配置: $config_name"

            if [ -f diy-part1.sh ]; then
              log "执行自定义脚本 diy-part1.sh"
              sudo chmod +x diy-part1.sh
              cd "$BUILD_DIR" && sudo "$WORKSPACE"/diy-part1.sh
            fi

            if [ -f "$WORKSPACE/config/$config_name/diy-part3.sh" ]; then
              log "执行自定义脚本 diy-part3.sh"
              sudo chmod +x $WORKSPACE/config/$config_name/diy-part3.sh
              cd "$BUILD_DIR" && sudo $WORKSPACE/config/$config_name/diy-part3.sh
            fi

            # 导入配置文件
            sudo cp -f "$WORKSPACE/config/$config_name/$CONFIG_FILE" "$BUILD_DIR/.config"
            custom_pkg_path="$WORKSPACE/config/$config_name/$CUSTOM_PKG_DIR"
            if [ -d "$custom_pkg_path" ]; then
              sudo cp -rf "$custom_pkg_path" "$BUILD_DIR/package/"
            fi

            log "更新并安装 feeds"
            cd "$BUILD_DIR"
            eval "sudo ./scripts/feeds update -a $REDIRECT"
            eval "sudo ./scripts/feeds install -a $REDIRECT"
            
            log "下载依赖包"
            eval "sudo make download -j$(nproc) $REDIRECT"
            
            # log "生成默认配置"
            # eval "sudo make defconfig $REDIRECT"

            if [ -f "$WORKSPACE/diy-part2.sh" ]; then
              log "执行自定义脚本 diy-part2.sh"
              sudo chmod +x $WORKSPACE/diy-part2.sh
              cd "$BUILD_DIR" && sudo $WORKSPACE/diy-part2.sh
            fi

            log "开始编译，预计耗时 2 小时以上"
            eval "sudo make V=s -j$(nproc) || make -j1 || make -j1 V=s $REDIRECT"
            log "固件编译完成"

            if [ -f "$WORKSPACE/config/$config_name/diy-part4.sh" ]; then
              log "执行自定义脚本 diy-part4.sh"
              sudo chmod +x config/$config_name/diy-part4.sh
              cd "$BUILD_DIR" && sudo "$WORKSPACE"/config/$config_name/diy-part4.sh
            fi

            find "$BUILD_DIR/bin/targets" -type f \( -name '*.img.gz' -o -name '*.bin' \) \
              | grep -Ev 'kernel\.bin$|rootfs\.img\.gz$' \
              | while read -r img_file; do
                  base_name=$(basename "$img_file")
                  sudo cp "$img_file" "$WORKSPACE/img/${config_name}_$base_name"
                  log "生成文件: ${config_name}_$base_name"
              done

            sudo rm -rf "$BUILD_DIR/.config"
            sudo rm -rf "$BUILD_DIR/bin/targets/*"

          done

      - name: 上传固件到 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.release_tag }}
          name: ${{ env.release_tag }}
          body: 自动构建上传的 OpenWrt 固件集合
          files: img/*
