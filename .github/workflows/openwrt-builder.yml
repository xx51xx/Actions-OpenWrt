name: OpenWrt 顺序构建发布

on:
  workflow_dispatch:

jobs:
  build-sequential:
    name: 顺序构建并发布固件
    runs-on: ubuntu-22.04
    env:
      REPO_URL:    https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      TZ:          Asia/Shanghai
      PKGS:         hello-openwrt
      Config:      .config
    steps:
      - name: 检出仓库
        uses: actions/checkout@v3

      - name: 安装 jq（JSON 处理工具）
        run: |
          sudo df -hT
          sudo apt-get update -qq
          sudo apt-get install -qq -y jq

          # sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          # sudo docker image prune --all --force
          # sudo -E apt-get -qq update
          # sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          # sudo -E apt-get -qq autoremove --purge
          # sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          # sudo mkdir -p /workdir
          # sudo chown $USER:$GROUPS /workdir
          sudo df -hT

      - name: 获取 config 目录列表
        id: get-configs
        run: |
          configs=$(find config -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort | jq -R '@json' | jq -cs .)
          echo "configs=$configs" >> $GITHUB_OUTPUT

      - name: 顺序构建每个 config
        id: build_loop
        run: |
          configs=${{ steps.get-configs.outputs.configs }}
          echo "发现配置列表: $configs"
          # 将 configs 解析成数组
          config_array=$(echo "$configs" | jq -r '.[]')

          for config_dir in $config_array; do
            # echo "开始构建配置: $config_dir"

            # # 清理并重新克隆源码目录，保证干净环境
            # rm -rf openwrt
            # git clone --depth 1 --branch "$REPO_BRANCH" "$REPO_URL" openwrt

            # # 复制 .config 和自定义包
            # cp "config/$config_dir/$Config" openwrt/.config
            # pkg="config/$config_dir/$PKGS"
            # if [ -d "$pkg" ]; then
            #   cp -R "$pkg" openwrt/package/
            # fi

            # # 自定义步骤 1
            # if [ -f diy-part1.sh ]; then
            #   chmod +x diy-part1.sh
            #   cd openwrt && ../diy-part1.sh
            #   cd ..
            # fi

            # # 更新并安装 Feeds
            # cd openwrt
            # ./scripts/feeds update -a
            # ./scripts/feeds install -a

            # # 下载源码依赖并清理空包
            # make defconfig
            # make download -j$(nproc) || true
            # find dl -size -1024c -delete

            # # 自定义步骤 2
            # cd ..
            # if [ -f diy-part2.sh ]; then
            #   chmod +x diy-part2.sh
            #   cd openwrt && ../diy-part2.sh
            #   cd ..
            # fi

            # # 编译固件
            # cd openwrt
            # make -j$(nproc) || make -j1 V=s
            # cd ..

            mkdir -p openwrt/bin/targets/xx/
            dd if=/dev/zero of=openwrt/bin/targets/xx/hello-openwrt.img.gz bs=1M count=1

            # 定位 .img.gz 固件
            img_path=$(find openwrt/bin/targets -type f -name '*.img.gz' | head -n1)
            if [ -z "$img_path" ]; then
              echo "⚠️ 未找到固件文件，跳过上传"
              continue
            fi
            echo "固件路径: $img_path"

            # 生成 Release Tag
            ts=$(date +'%Y%m%d%H%M%S')
            release_tag="${config_dir}_$ts"
            echo "生成 Tag: $release_tag"

            # 上传固件到 GitHub Release
            gh release create "$release_tag" "$img_path" --title "$release_tag" --notes "自动发布固件"

            echo "完成构建并上传: $config_dir"

          done
