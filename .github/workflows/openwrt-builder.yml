name: OpenWrt 顺序构建发布

on:
  workflow_dispatch:

jobs:
  build-sequential:
    name: 顺序构建并发布固件
    runs-on: ubuntu-22.04
    env:
      REPO_URL:        https://github.com/coolsnowwolf/lede
      REPO_BRANCH:     master
      TZ:              Asia/Shanghai
      CUSTOM_PKG_DIR:  hello-openwrt
      CONFIG_FILE:     .config
      BUILD_DIR:       /workdir/openwrt
      WORKSPACE:       ${{ github.workspace }}
      LOG_SILENT:      false

    steps:
      - name: 检出当前 GitHub 仓库
        uses: actions/checkout@v3

      - name: 安装依赖及清理空间
        run: |
          echo "FORCE_UNSAFE_CONFIGURE=1" >> $GITHUB_ENV
          export FORCE_UNSAFE_CONFIGURE=1

          if [ "$LOG_SILENT" = "true" ]; then
            REDIRECT=">/dev/null 2>&1"
          else
            REDIRECT=""
          fi

          log() {
            echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $*"
          }

          log "设置时区与主机名"
          sudo timedatectl set-timezone "$TZ"
          sudo hostname OpenWrt

          log "安装依赖"
          eval "sudo apt-get update -qq $REDIRECT"
          eval "sudo apt-get install -qq -y jq build-essential git python3 rsync curl $REDIRECT"

          log "清理空间"
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          eval "sudo docker image prune --all --force $REDIRECT"

          mkdir -p /workdir
          mkdir -p img

          ts=$(date +'%Y%m%d%H%M%S')
          echo "release_tag=OpenWRT_Build_$ts" >> $GITHUB_ENV

      - name: 获取 config 目录列表
        id: get-configs
        run: |
          if [ "$LOG_SILENT" = "true" ]; then
            REDIRECT=">/dev/null 2>&1"
          else
            REDIRECT=""
          fi

          log() { echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $*"; }
          configs=$(find config -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort | jq -R '@json' | jq -cs .)
          echo "configs=$configs" >> $GITHUB_OUTPUT

      - name: 克隆 OpenWrt 源代码
        run: |
          if [ "$LOG_SILENT" = "true" ]; then REDIRECT=">/dev/null 2>&1"; else REDIRECT=""; fi
          log() { echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $*"; }
          log "开始克隆源码"
          git clone --depth 1 --branch "$REPO_BRANCH" "$REPO_URL" "$BUILD_DIR"

      - name: 构建每个 config 配置的固件
        run: |
          if [ "$LOG_SILENT" = "true" ]; then REDIRECT=">/dev/null 2>&1"; else REDIRECT=""; fi

          log() {
            echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $*"
          }

          configs=${{ steps.get-configs.outputs.configs }}
          config_array=$(echo "$configs" | jq -r '.[]')

          for config_name in $config_array; do
            log "开始构建配置: $config_name"

            if [ -f "$WORKSPACE/diy-part1.sh" ]; then
              chmod +x "$WORKSPACE/diy-part1.sh"
              cd "$BUILD_DIR" && "$WORKSPACE/diy-part1.sh"
            fi

            if [ -f "$WORKSPACE/config/$config_name/diy-part3.sh" ]; then
              chmod +x "$WORKSPACE/config/$config_name/diy-part3.sh"
              cd "$BUILD_DIR" && "$WORKSPACE/config/$config_name/diy-part3.sh"
            fi

            cd "$BUILD_DIR"
            eval "./scripts/feeds update -a $REDIRECT"
            eval "./scripts/feeds install -a $REDIRECT"

            cp -f "$WORKSPACE/config/$config_name/$CONFIG_FILE" ".config"
            custom_pkg_path="$WORKSPACE/config/$config_name/$CUSTOM_PKG_DIR"
            if [ -d "$custom_pkg_path" ]; then
              cp -rf "$custom_pkg_path" "package/"
            fi

            log "生成配置并下载依赖"
            eval "make defconfig $REDIRECT"
            eval "make download -j\$(nproc) || make download -j1 || make download -j8 $REDIRECT"
            find dl -size -1024c -exec rm -f {} \; $REDIRECT

            if [ -f "$WORKSPACE/diy-part2.sh" ]; then
              chmod +x "$WORKSPACE/diy-part2.sh"
              cd "$BUILD_DIR" && "$WORKSPACE/diy-part2.sh"
            fi

            log "开始编译"
            eval "make V=s -j\$(nproc) || make -j1 || make -j1 V=s $REDIRECT"
            log "编译完成"

            if [ -f "$WORKSPACE/config/$config_name/diy-part4.sh" ]; then
              chmod +x "$WORKSPACE/config/$config_name/diy-part4.sh"
              cd "$BUILD_DIR" && "$WORKSPACE/config/$config_name/diy-part4.sh"
            fi

            find bin/targets -type f \( -name '*.img.gz' -o -name '*.bin' \) \
              | grep -Ev 'kernel\\.bin$|rootfs\\.img\\.gz$' \
              | while read -r img_file; do
                  base_name=$(basename "$img_file")
                  cp "$img_file" "$WORKSPACE/img/${config_name}_$base_name"
                  log "生成文件: ${config_name}_$base_name"
              done

            rm -rf .config bin/targets/*
          done

      - name: 上传固件到 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.release_tag }}
          name: ${{ env.release_tag }}
          body: 自动构建上传的 OpenWrt 固件集合
          files: img/*
