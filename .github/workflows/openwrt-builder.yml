name: OpenWrt 顺序构建发布 

on:
  workflow_dispatch: null

jobs:
  build-sequential:
    name: 顺序构建并发布固件
    # 指定运行器环境为 Ubuntu 22.04
    runs-on: ubuntu-22.04     

    # 全局环境变量
    env:                      
      REPO_URL: https://github.com/coolsnowwolf/lede                      # OpenWrt 源码仓库地址
      REPO_BRANCH: master                                                 # 克隆的分支
      CUSTOM_PKG_DIR: hello-openwrt                                       # 每个 config 子目录下的自定义包目录名
      CONFIG_FILE: .config                                                # 每个 config 子目录下的配置文件名
      LOG_SILENT: true                                                    # 是否静默日志输出：true 输出日志，false 静默

    steps:
      # 第一步：检出当前仓库（包含本工作流文件）
      - name: 检出源码仓库                          
        uses: actions/checkout@v4

      # 第二步：安装系统依赖和扩展磁盘
      - name: 安装系统依赖和扩展磁盘            
        run: >
          echo "正在运行 安装系统依赖和扩展磁盘" > /dev/null 2>&1
          
          # 定义日志函数，格式 [YYYY-MM-DD HH:MM:SS] 消息
          log() {                                 
            current_time=$(date '+%F %T')
            echo "[$current_time] $*"
          }

          # 导出环境变量以允许 OpenWrt configure
          echo "FORCE_UNSAFE_CONFIGURE=1" >> "$GITHUB_ENV"   
          export FORCE_UNSAFE_CONFIGURE=1

          # 全局变量2
          env.TIMEZONE: Asia/Shanghai                             # 时区设置，用于 date/timedatectl
          env.BUILD_DIR: ${{ github.workspace }}/openwrt          # 源码与构建输出目录
          env.OUTPUT_DIR: ${{ github.workspace }}/img             # 最终固件存放目录
          env.WORKSPACE_DIR: ${{ github.workspace }}              # GitHub 工作区根目录

          # 根据 LOG_SILENT 控制是否重定向输出
          if [ "$LOG_SILENT" = true ]; then        
            REDIRECT="> /dev/null 2>&1"
          else
            REDIRECT=""
          fi

          log "清理不必要的软件包节省空间" 
          
          # 清理 Docker 镜像
          eval "sudo docker image prune -af $REDIRECT"  

          # 删除系统冗余目录
          eval "sudo rm -rf /etc/apt/sources.list.d/* \
            /usr/share/dotnet \
            /usr/local/lib/android \
            /opt/ghc \
            /opt/hostedtoolcache/CodeQL $REDIRECT"

          log "安装编译依赖包"  

          # 更新 apt 索引
          eval "sudo -E apt-get -qq update $REDIRECT" 
          # 安装编译所需工具
          eval "sudo -E apt-get install -qq -y ack antlr3 ..."  
          # 自动移除冗余包
          eval "sudo -E apt-get -qq autoremove --purge $REDIRECT"  
          # 清理 apt 缓存
          eval "sudo apt-get -qq clean $REDIRECT"                

          # 设置时区
          if [ -n "$TIMEZONE" ]; then             
            sudo timedatectl set-timezone "$TIMEZONE"
          else
            log "TIMEZONE 未设置，跳过设置时区"
          fi

          # 设置主机名
          sudo hostname OpenWrt                 
          sudo hostnamectl set-hostname OpenWrt

          log "挂载 LVM 磁盘用于构建"

          # 开始挂载磁盘
          mnt_size=$(( $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[^0-9]//g') - 1 ))
          root_size=$(( $(df -h / | tail -1 | awk '{print $4}' | sed 's/[^0-9]//g') - 4 ))
          eval "sudo truncate -s \"${mnt_size}G\" /mnt/mnt.img $REDIRECT"
          eval "sudo truncate -s \"${root_size}G\" /root.img $REDIRECT"

          eval "sudo losetup /dev/loop6 /mnt/mnt.img $REDIRECT"
          eval "sudo losetup /dev/loop7 /root.img $REDIRECT"
          eval "sudo pvcreate /dev/loop6 $REDIRECT"
          eval "sudo pvcreate /dev/loop7 $REDIRECT"
          eval "sudo vgcreate github /dev/loop6 /dev/loop7 $REDIRECT"
          eval "sudo lvcreate -n runner -l 100%FREE github $REDIRECT"
          eval "sudo mkfs.xfs /dev/github/runner $REDIRECT"

          # 准备 /builder 目录并挂载
          if [ ! -d "/builder" ]; then
            sudo mkdir -p /builder
          fi
          sudo chown -R $(id -u):$(id -g) /builder
          eval "sudo mount /dev/github/runner /builder $REDIRECT"

          # 准备 /builder/workdir 目录并挂载
          if [ ! -d "/builder/workdir" ]; then
            sudo mkdir -p /builder/workdir
          fi
          sudo chown -R $(id -u):$(id -g) /builder/workdir

          # # 删除旧 $BUILD_DIR
          # if [ -d "$BUILD_DIR" ]; then
          #   sudo rm -rf $BUILD_DIR
          # fi
          
          # 创建软链接到 builder
          sudo ln -s /builder/workdir $BUILD_DIR

          # 创建输出目录
          if [ ! -d "$OUTPUT_DIR" ]; then
            sudo mkdir -p "$OUTPUT_DIR"
            sudo chown -R $(id -u):$(id -g) "$OUTPUT_DIR"
          fi

          # 创建 OpenWrt 缓存目录
          if [ ! -d "/workdir/" ]; then
            sudo mkdir -p /workdir/
            sudo chown -R $(id -u):$(id -g) "/workdir/"
          fi
          
          if [ ! -d "/workdir/tmp" ]; then
            sudo mkdir -p /workdir/tmp
            sudo chown -R $(id -u):$(id -g) "/workdir/tmp"
          fi
          
          if [ ! -d "/workdir/staging_dir" ]; then
            sudo mkdir -p /workdir/staging_dir
            sudo chown -R $(id -u):$(id -g) "/workdir/staging_dir"
          fi
          
          if [ ! -d "/workdir/dl-cache" ]; then
            sudo mkdir -p /workdir/dl-cache
            sudo chown -R $(id -u):$(id -g) "/workdir/dl-cache"
          fi
          
          # 在源码目录下创建必要的软链接
          sudo ln -s /workdir/tmp "$BUILD_DIR/tmp"
          sudo ln -s /workdir/staging_dir "$BUILD_DIR/staging_dir"
          sudo ln -s /workdir/dl-cache "$BUILD_DIR/dl"

          # 生成时间戳
          ts=$(date +'%Y%m%d%H%M%S')
          # 设置 release_tag 环境变量
          echo "release_tag=OpenWRT_Build_$ts" >> "$GITHUB_ENV"  

      # 第三步：克隆官方源码
      - name: 克隆 OpenWrt 源码                
        run: >
          echo "正在运行 克隆 OpenWrt 源码" > /dev/null 2>&1
        
          log() {                            
            current_time=$(date '+%F %T')
            echo "[$current_time] $*"
          }

          if [ "$LOG_SILENT" = true ]; then
            REDIRECT="> /dev/null 2>&1"
          else
            REDIRECT=""
          fi

          # 临时源码目录
          TEMP_DIR="$WORKSPACE_DIR/tmp_source" 
          if [ ! -d "$TEMP_DIR" ]; then
            mkdir -p "$TEMP_DIR"
            sudo chown -R $(id -u):$(id -g) "$TEMP_DIR"
          fi
          rm -rf "$TEMP_DIR"/*

          # 克隆源代码
          eval "git clone --depth 1 --branch $REPO_BRANCH $REPO_URL $TEMP_DIR $REDIRECT"
          
          shopt -s dotglob
          # 移动 临时源码目录
          mv -f "$TEMP_DIR"/* "$BUILD_DIR"/
          shopt -u dotglob
          # 删除 临时源码目录
          rm -rf "$TEMP_DIR"

      # 第四步：按 config 子目录循环构建
      - name: 按配置构建固件                  
        run: >
          echo "正在运行 按配置构建固件" > /dev/null 2>&1
          
          log() {
            current_time=$(date '+%F %T')
            echo "[$current_time] $*"
          }

          if [ "$LOG_SILENT" = true ]; then
            REDIRECT="> /dev/null 2>&1"
          else
            REDIRECT=""
          fi

          # 扫描 config 子目录生成 JSON 列表
          CONFIG_LIST=$(find config -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort | jq -R . | jq -s .)

          # 默认在工作目录
          cd $WORKSPACE_DIR
          
          for cfg in $(echo "$CONFIG_LIST" | jq -r '.[]'); do
            log "开始构建配置：$cfg"

            if [ ! -d "$BUILD_DIR" ]; then
              cd "$BUILD_DIR"
            fi
            
            # DIY 脚本 1
            if [ -f "$WORKSPACE_DIR/diy-part1.sh" ]; then
              log "执行 DIY 脚本 1"
              chmod +x "$WORKSPACE_DIR/diy-part1.sh"
              cd "$BUILD_DIR" && "$WORKSPACE_DIR/diy-part1.sh"
              cd "$BUILD_DIR" 
            fi

            # DIY 脚本 3
            if [ -f "$WORKSPACE_DIR/config/$cfg/diy-part3.sh" ]; then
              log "执行 DIY 脚本 3"
              chmod +x "$WORKSPACE_DIR/config/$cfg/diy-part3.sh"
              cd "$BUILD_DIR" && "$WORKSPACE_DIR/config/$cfg/diy-part3.sh"
              cd "$BUILD_DIR" 
            fi

            # 更新OpenWrt软件源
            eval "cd $BUILD_DIR && ./scripts/feeds update -a $REDIRECT"
            eval "cd $BUILD_DIR && ./scripts/feeds install -a $REDIRECT"

            if [ ! -d "$BUILD_DIR" ]; then
              cd "$BUILD_DIR"
            fi

            # 复制 .config 文件
            CONFIG_PATH="$WORKSPACE_DIR/config/$cfg/$CONFIG_FILE"
            if [ -f "$CONFIG_PATH" ]; then
              sudo cp -f "$CONFIG_PATH" .config
              sudo chown $(id -u):$(id -g) .config
            else
              echo "自定义包目录不存在：$CUSTOM_PKG_PATH"
              # log "请注意，配置文件 $CONFIG_PATH 不存在！"

              # 如注释 [exit 1] 生成默认配置文件执行,流程不会结束
              exit 1

            fi

            if [ ! -d "$BUILD_DIR" ]; then
              cd "$BUILD_DIR"
            fi

            # 复制 hello-openwrt 包
            CUSTOM_PKG_PATH="$WORKSPACE_DIR/config/$cfg/$CUSTOM_PKG_DIR"
            if [ -d "$CUSTOM_PKG_PATH" ]; then
              log "复制自定义包目录：$CUSTOM_PKG_DIR"
              cp -rf "$CUSTOM_PKG_PATH" package/
              sudo chown -R $(id -u):$(id -g) package/
            else 
              echo "自定义包目录不存在：$CUSTOM_PKG_PATH"
              # log "自定义包目录不存在：$CUSTOM_PKG_PATH"
              
              # 如注释 [exit 1] 默认继续执行,流程不会结束
              # exit 1
              
            fi

            if [ ! -d "$BUILD_DIR" ]; then
              cd "$BUILD_DIR"
            fi
            
            # defconfig 与依赖下载
            eval "make defconfig $REDIRECT"
            eval "make download -j$(nproc) || make download -j1 || make download -j8 $REDIRECT"
            eval "find dl -size -1024c -exec ls -l {} \; $REDIRECT"
            eval "find dl -size -1024c -exec rm -f {} \; $REDIRECT"

            if [ ! -d "$BUILD_DIR" ]; then
              cd "$BUILD_DIR"
            fi

            # DIY 脚本 2
            if [ -f "$WORKSPACE_DIR/diy-part2.sh" ]; then
              log "执行 DIY 脚本 2"
              chmod +x "$WORKSPACE_DIR/diy-part2.sh"
              cd "$BUILD_DIR" && "$WORKSPACE_DIR/diy-part2.sh"
              cd "$BUILD_DIR" 
            fi

            if [ ! -d "$BUILD_DIR" ]; then
              cd "$BUILD_DIR"
            fi

            log "开始编译 $cfg"
            eval "make -j$(nproc) V=s || make -j1 V=s || make -j1 $REDIRECT"

            if [ ! -d "$BUILD_DIR" ]; then
              cd "$BUILD_DIR"
            fi

            # 收集固件文件并输出
            find bin/targets -type f \( -name '*.img.gz' -o -name '*.bin' \) \
              | grep -Ev 'kernel\.bin$|rootfs\.img\.gz$' \
              | while read -r img; do
                  base=$(basename "$img")
                  cp "$img" "$OUTPUT_DIR/${cfg}_$base"
                  log "输出固件：${cfg}_$base"
                done

            # DIY 脚本 4
            if [ -f "$WORKSPACE_DIR/config/$cfg/diy-part4.sh" ]; then
              log "执行 DIY 脚本 4"
              chmod +x "$WORKSPACE_DIR/config/$cfg/diy-part4.sh"
              cd "$BUILD_DIR" && "$WORKSPACE_DIR/config/$cfg/diy-part4.sh"
              cd "$BUILD_DIR" 
            fi

            if [ ! -d "$BUILD_DIR" ]; then
              cd "$BUILD_DIR"
            fi

            rm -f .config
            rm -rf bin/targets/*

            # 返回工作目录
            cd $WORKSPACE_DIR
            
          done

      - name: 发布固件到 GitHub Release        # 第五步：将生成的固件上传到 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.release_tag }}     # 使用前面生成的 release_tag
          name: ${{ env.release_tag }}
          body: 自动构建上传的 OpenWrt 固件集合
          files: ${{ env.OUTPUT_DIR }}/*       # 上传 OUTPUT_DIR 下所有文件
