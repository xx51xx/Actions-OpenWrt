name: OpenWrt 顺序构建发布

on:
  workflow_dispatch:

jobs:
  build-sequential:
    name: 顺序构建并发布固件
    runs-on: ubuntu-22.04
    env:
      REPO_URL: https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      TZ: Asia/Shanghai
      CUSTOM_PKG_DIR: hello-openwrt
      CONFIG_FILE: .config
      BUILD_DIR: /workdir/openwrt
      WORKSPACE: ${{ github.workspace }}
      LOG_SILENT: false

    steps:
      - name: 检出当前 GitHub 仓库
        uses: actions/checkout@v4

      - name: 安装依赖及清理空间
        run: |
          log() {
            echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $*"
          }

          echo "FORCE_UNSAFE_CONFIGURE=1" >> $GITHUB_ENV
          export FORCE_UNSAFE_CONFIGURE=1

          if [ "$LOG_SILENT" = "true" ]; then
            REDIRECT=">/dev/null 2>&1"
          else
            REDIRECT=""
          fi

          log "开始安装依赖与清理空间"

          eval "df -hT $REDIRECT"
          eval "sudo apt-get update -qq $REDIRECT"

          # 基础构建依赖
          eval "sudo apt-get install -y -qq \
            ack antlr3 asciidoc autoconf automake autopoint bash bc binutils \
            bison build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler \
            dos2unix fastjar fakeroot file flex g++ gawk gcc-multilib gettext \
            git gperf haveged help2man intltool libglib2.0-dev libfuse-dev \
            libgmp-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev \
            libncursesw5-dev libpython3-dev libreadline-dev libssl-dev \
            libtool libz-dev llvm lrzsz msmtp nano ninja-build patch \
            pkgconf python3 python3-distutils python3-pyelftools \
            python3-setuptools qemu-utils rsync scons squashfs-tools \
            subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto zlib1g-dev $REDIRECT"

          eval "sudo apt-get -qq autoremove --purge $REDIRECT"
          eval "sudo apt-get -qq clean $REDIRECT"

          sudo timedatectl set-timezone "$TZ"
          sudo hostname OpenWrt
          sudo hostnamectl set-hostname OpenWrt

          sudo mkdir -p /workdir /img
          sudo chown -R $(id -u):$(id -g) /workdir /img $WORKSPACE

          if [ ! -d "$BUILD_DIR" ]; then
            mkdir -p "$BUILD_DIR"
          fi

          ts=$(date +'%Y%m%d%H%M%S')
          release_tag="OpenWRT_Build_$ts"
          echo "release_tag=$release_tag" >> $GITHUB_ENV

          log "依赖安装与清理完成"
          eval "df -hT $REDIRECT"

      - name: 获取 config 目录列表
        id: get-configs
        run: |
          log() {
            echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $*"
          }
          log "获取 config 目录列表"
          configs=$(find config -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort | jq -R '@json' | jq -cs .)
          echo "configs=$configs" >> $GITHUB_OUTPUT
          log "获取 config 目录完成"
          
      - name: 克隆 OpenWrt 源代码到目录
        run: |
          echo "正在运行 克隆 OpenWrt 源代码到目录" > /dev/null 2>&1

          log() { echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $1"; }

          if [ "$LOG_SILENT" = "true" ]; then
            REDIRECT=">/dev/null 2>&1"
          else
            REDIRECT=""
          fi

          log "开始克隆 OpenWrt 源码"
          gitpkg="$WORKSPACE/openwrt_pkg"
          mkdir -p "$gitpkg"
          rm -rf "$gitpkg"/*

          eval "git clone --depth 1 --branch \"$REPO_BRANCH\" \"$REPO_URL\" \"$gitpkg\" $REDIRECT"

          shopt -s dotglob
          mkdir -p "$BUILD_DIR"
          mv -f "$gitpkg"/* "$BUILD_DIR"/
          shopt -u dotglob

          rm -rf "$gitpkg"
          log "源码克隆完成"

      - name: 构建每个 config 配置的固件
        run: |
          log() {
            echo "[$(date '+%Y-%m-%d-%H:%M:%S')] $*"
          }

          if [ "$LOG_SILENT" = "true" ]; then
            REDIRECT=">/dev/null 2>&1"
          else
            REDIRECT=""
          fi

          configs=${{ steps.get-configs.outputs.configs }}
          log "发现配置列表: $configs"
          config_array=$(echo "$configs" | jq -r '.[]')

          for config_name in $config_array; do
            log "开始构建配置: $config_name"

            if [ -f "$WORKSPACE/diy-part1.sh" ]; then
              chmod +x "$WORKSPACE/diy-part1.sh"
              cd "$BUILD_DIR" && "$WORKSPACE/diy-part1.sh"
            fi

            if [ -f "$WORKSPACE/config/$config_name/diy-part3.sh" ]; then
              chmod +x "$WORKSPACE/config/$config_name/diy-part3.sh"
              cd "$BUILD_DIR" && "$WORKSPACE/config/$config_name/diy-part3.sh"
            fi

            log "更新 feeds"
            cd "$BUILD_DIR"
            eval "./scripts/feeds update -a $REDIRECT"
            eval "./scripts/feeds install -a $REDIRECT"

            cp -f "$WORKSPACE/config/$config_name/$CONFIG_FILE" "$BUILD_DIR/.config"
            custom_pkg_path="$WORKSPACE/config/$config_name/$CUSTOM_PKG_DIR"
            if [ -d "$custom_pkg_path" ]; then
              cp -rf "$custom_pkg_path" "$BUILD_DIR/package/"
            fi

            log "准备编译环境"
            eval "make defconfig $REDIRECT"
            eval "make download -j$(nproc) || make download -j1 || make download -j8 $REDIRECT"
            eval "find dl -size -1024c -exec rm -f {} \; $REDIRECT"

            if [ -f "$WORKSPACE/diy-part2.sh" ]; then
              chmod +x "$WORKSPACE/diy-part2.sh"
              cd "$BUILD_DIR" && "$WORKSPACE/diy-part2.sh"
            fi

            log "开始编译配置 $config_name"
            eval "make -j$(nproc) V=s || make -j1 || make -j1 V=s $REDIRECT"
            log "编译完成: $config_name"

            if [ -f "$WORKSPACE/config/$config_name/diy-part4.sh" ]; then
              chmod +x "$WORKSPACE/config/$config_name/diy-part4.sh"
              cd "$BUILD_DIR" && "$WORKSPACE/config/$config_name/diy-part4.sh"
            fi

            find "$BUILD_DIR/bin/targets" -type f \( -name '*.img.gz' -o -name '*.bin' \) \
              | grep -Ev 'kernel\\.bin$|rootfs\\.img\\.gz$' \
              | while read -r img_file; do
                  base_name=$(basename "$img_file")
                  cp "$img_file" "/img/${config_name}_$base_name"
                  log "输出文件: ${config_name}_$base_name"
                done

            rm -f "$BUILD_DIR/.config"
            rm -rf "$BUILD_DIR/bin/targets"/*
          done

      - name: 上传固件到 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.release_tag }}
          name: ${{ env.release_tag }}
          body: 自动构建上传的 OpenWrt 固件集合
          files: /img/*
