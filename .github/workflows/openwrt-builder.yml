name: OpenWrt 构建发布

on:
  workflow_dispatch:

jobs:
  build:
    name: 构建并发布 OpenWrt 固件
    runs-on: ubuntu-22.04
    env:
      REPO_URL: https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      TZ: Asia/Shanghai
      CUSTOM_PKG_DIR: hello-openwrt
      CONFIG_FILE: .config
      OPENWRT_DIR: /workdir/openwrt
      GITHUB_DIR: ${{ github.workspace }}
      LOG_SILENT: true #日志开关

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装依赖并初始化
        run: |
          # 日志函数（是否静默由 LOG_SILENT 控制）
          log() {
            if [ "$LOG_SILENT" != "true" ]; then
              echo "[`date '+%Y-%m-%d-%H:%M:%S'`] $1"
            fi
          }

          log "开始设置环境变量"
          echo "FORCE_UNSAFE_CONFIGURE=1" >> $GITHUB_ENV
          export FORCE_UNSAFE_CONFIGURE=1

          # 设置日志重定向开关
          if [ "$LOG_SILENT" = "true" ]; then
            REDIRECT=" >/dev/null 2>&1"
          else
            REDIRECT=""
          fi

          log "开始安装依赖"
          sudo apt-get update -qq $REDIRECT
          sudo apt-get install -y -qq build-essential clang flex bison g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3 unzip zlib1g-dev file wget $REDIRECT

          log "设置时区和主机名"
          sudo timedatectl set-timezone "$TZ" $REDIRECT
          sudo hostname OpenWrt $REDIRECT

          log "准备构建目录"
          sudo mkdir -p /workdir /img
          sudo chown -R $(id -u):$(id -g) /workdir /img "$GITHUB_DIR"

          if [ ! -d "$OPENWRT_DIR" ]; then
            mkdir -p "$OPENWRT_DIR"
          fi

          # 生成构建时间戳 tag
          ts=$(date '+%Y%m%d%H%M%S')
          echo "release_tag=OpenWRT_Build_$ts" >> $GITHUB_ENV
          log "构建标签为 OpenWRT_Build_$ts"

      - name: 获取配置列表
        id: configlist
        run: |
          echo "configs=$(find config -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort | jq -R -s -c 'split("\n") | map(select(. != ""))')" >> $GITHUB_OUTPUT

      - name: 克隆 OpenWrt 源码
        run: |
          log() {
            if [ "$LOG_SILENT" != "true" ]; then
              echo "[`date '+%Y-%m-%d-%H:%M:%S'`] $1"
            fi
          }

          log "开始克隆 OpenWrt 源码"
          mkdir -p "$GITHUB_DIR/openwrt_source"
          git clone --depth 1 --branch "$REPO_BRANCH" "$REPO_URL" "$GITHUB_DIR/openwrt_source"

          log "复制源码到构建目录"
          shopt -s dotglob
          cp -rf "$GITHUB_DIR/openwrt_source"/* "$OPENWRT_DIR"/
          shopt -u dotglob
          rm -rf "$GITHUB_DIR/openwrt_source"
          log "克隆完成"

      - name: 构建每个配置固件
        run: |
          log() {
            if [ "$LOG_SILENT" != "true" ]; then
              echo "[`date '+%Y-%m-%d-%H:%M:%S'`] $1"
            fi
          }

          configs=${{ steps.configlist.outputs.configs }}
          for config_name in $(echo "$configs" | jq -r '.[]'); do
            log "开始构建配置：$config_name"

            if [ -f "$GITHUB_DIR/diy-part1.sh" ]; then
              chmod +x "$GITHUB_DIR/diy-part1.sh" && cd "$OPENWRT_DIR" && "$GITHUB_DIR/diy-part1.sh"
            fi

            if [ -f "$GITHUB_DIR/config/$config_name/diy-part3.sh" ]; then
              chmod +x "$GITHUB_DIR/config/$config_name/diy-part3.sh" && cd "$OPENWRT_DIR" && "$GITHUB_DIR/config/$config_name/diy-part3.sh"
            fi

            log "更新 feeds"
            cd "$OPENWRT_DIR"
            ./scripts/feeds update -a
            ./scripts/feeds install -a

            log "复制配置文件"
            cp "$GITHUB_DIR/config/$config_name/$CONFIG_FILE" "$OPENWRT_DIR/.config"

            if [ -d "$GITHUB_DIR/config/$config_name/$CUSTOM_PKG_DIR" ]; then
              cp -rf "$GITHUB_DIR/config/$config_name/$CUSTOM_PKG_DIR" "$OPENWRT_DIR/package/"
            fi

            log "执行 defconfig 和下载源码"
            make -C "$OPENWRT_DIR" defconfig
            make -C "$OPENWRT_DIR" download -j8 || make -C "$OPENWRT_DIR" download -j1
            find "$OPENWRT_DIR/dl" -size -1024c -exec rm -f {} \;

            if [ -f "$GITHUB_DIR/diy-part2.sh" ]; then
              chmod +x "$GITHUB_DIR/diy-part2.sh" && cd "$OPENWRT_DIR" && "$GITHUB_DIR/diy-part2.sh"
            fi

            log "开始编译 OpenWrt"
            make -C "$OPENWRT_DIR" -j$(nproc) || make -C "$OPENWRT_DIR" -j1

            if [ -f "$GITHUB_DIR/config/$config_name/diy-part4.sh" ]; then
              chmod +x "$GITHUB_DIR/config/$config_name/diy-part4.sh" && cd "$OPENWRT_DIR" && "$GITHUB_DIR/config/$config_name/diy-part4.sh"
            fi

            log "复制生成的固件文件"
            find "$OPENWRT_DIR/bin/targets" -type f \( -name '*.img.gz' -o -name '*.bin' \) \
              | grep -Ev 'kernel\.bin$|rootfs\.img\.gz$' \
              | while read file; do
                  cp "$file" "/img/${config_name}_$(basename "$file")"
                done

            log "清理构建目录"
            rm -f "$OPENWRT_DIR/.config"
            rm -rf "$OPENWRT_DIR/bin/targets"/*
          done

      - name: 上传固件到 Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.release_tag }}
          name: ${{ env.release_tag }}
          body: OpenWrt 自动构建固件合集
          files: /img/*
